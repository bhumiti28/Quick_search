implementation stack using queue javatpoint home data structure c c c java sql html css javascript ajax android cloud design pattern quiz projects interview q comment forum ds tutorial ds tutorial ds introduction ds algorithm asymptotic analysis ds pointer ds structure ds array ds array d array ds linked list linked list types linked list singly linked list doubly linked list circular linked list circular doubly list skip list ds ds stack ds stack array implementation linked list implementation ds queue ds queue types queues array representation linked list representation circular queue deque priority queue ds tree ds tree binary tree binary search tree avl tree b tree b tree ds graph ds graph graph implementation bfs algorithm dfs algorithm spanning tree ds searching linear search binary search ds sorting bubble sort bucket sort comb sort counting sort heap sort insertion sort merge sort quick sort radix sort selection sort shell sort bitonic sort cocktail sort cycle sort tim sort differences linear vs nonlinear array vs linked list stack vs queue linear vs circular queue linear search vs binary search singly linked list vs doubly linked list binary vs binary search tree tree vs graph binary search tree vs avl tree red black tree vs avl tree b tree vs b tree quick sort vs merge sort bfs vs dfs stack vs heap bubble sort vs selection sort misc trie data structure heap data structure splay tree fundamental ds hash table preorder traversal tree traversal implementation queue using stacks implementation stack using queue binomial heap postorder traversal sparse matrix detect loop linked list inorder traversal convert infix postfix notation convert infix prefix notation conversion prefix postfix expression conversion postfix prefix expression ds mcq data structure mcq next prev implementation stack using queue stack linear data structure follows lifo principle means element inserted first removed last hand queue linear data structure follows fifo principle means added element removed first now discuss implement stack using queue two approaches implement stack using queue first make push operation costly second make pop operation costly first approach making push operation costly lets understand example suppose list given p p list p means implement pop operation whereas integers inserted stack we implement queue say implement push pop operations queue first create two empty queues shown created two queues ie queue queue first push element queue front rear point element shown after inserting element insert element queue first pop element queue push queue push element queue shown observe figure front rear queue point element whereas front rear queue point element once insertion element completed element queue moves back queue queue front point element rear point element shown now next element insert queue order achieve elements ie queue popped added queue once elements popped queue element pushed queue front point element shown after pushing element queue pop elements queue push back queue front point element rear point element shown next operation pop operation till observed push operation costly pop operation takes o time so pop element queue update front pointer popped element printed output now front point element shown next element inserted first pop elements queue add queue shown once elements popped queue element would pushed queue front rear queue point element shown after inserting element queue pop elements queue move back queue shown observe figure front points element rear points element next operation pop operation pop operation element would popped queue gets printed output front pointer gets updated points element shown output want verify whether output correct use stack first push element stack shown next element pushed stack shown next element pushed stack shown now pop operation called element popped stack element gets printed output shown next element pushed stack after inserting pop operation called element popped stack element gets printed output output output generated implementation queue time complexity implement stack queue push operation take time elements need popped queue push back queue pop operation take o time need remove front element queue algorithm push operation costly push algorithm following steps perform push operation step consider two queues ie q q element inserted queue x step q isempty q enqueuex else size q size i size q enqueueq dequeue end q enqueuex j size q enqueueq dequeue end pop algorithm following steps perform pop operation step consider two queues ie q q want remove element front queue step item q dequeue step return item second approach making pop operation costly suppose list given p p we consider two queues ie queue queue done previous approach first push element queue shown next element pushed queue shown next element also pushed queue shown now implement pop operation queue case first pop elements except last pointed rear add queue last element removed queue gets printed output shown now move elements queue back queue next element inserted queue shown next operation pop operation operation first need pop elements queue except last element pointed rear add queue last element ie removed queue gets printed output shown elements added queue moved back queue shown observe figure output generated elements remaining queue time complexity case push operation takes o time push operation new element added end queue hand pop operation takes pop operation elements popped queue except last element pushed queue last element queue deleted elements queue moved back queue algorithm pop operation costly push algorithm following steps perform push operation step consider two queues ie q q element inserted queue x step element q enqueuex step return element pop algorithm following steps delete element queue step consider two queues ie q q want remove element queue step q isempty size q size i size q enqueueq dequeue end int item q dequeue j size q enqueueq dequeue end next topicbinomial heap prev next videos join our youtube channel join now help others please share learn latest tutorials soapui rpa manual t cucumber appium postgresql solr mongodb gimp verilog teradata phonegap preparation aptitude reasoning verbal interview company trending technologies ai aws selenium cloud hadoop reactjs d science angular blockchain git ml devops btech mca dbms ds daa os c network compiler d coa d math e hacking c graphics software e web tech cyber sec automata c c java net python programs control s data mining javatpoint services javatpoint offers many high quality services mail us hrjavatpointcom get information given services website designing website development java development php development wordpress graphic designing logo digital marketing page off page seo ppc content development corporate training classroom online training data entry training college campus javatpoint offers college campus training core java advance java net android hadoop php web technology python please mail requirement hrjavatpointcom duration week week likesubscribe us latest updates newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c tutoriallearn c tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpointcomhindi comlyricsiacomquotepersoncomjobandplacementcom our services website development android development website designing digital marketing summer training industrial training college campus training contact address g nd floor sec noida up india contact contact us subscribe us privacy policysitemap about me copyright wwwjavatpointcom all rights reserved developed javatpoint
